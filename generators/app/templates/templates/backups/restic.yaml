{{- if .Values.persistence.backup.enabled }}
apiVersion: stash.appscode.com/v1alpha1
kind: Restic
metadata:
  name: {{ template "<%- _.kebabCase(name) %>.sharedname" . }}-<%- _.kebabCase(workload.name) %>
  labels:
    app: {{ template "<%- _.kebabCase(name) %>.name" . }}-<%- _.kebabCase(workload.name) %>
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: {{ template "<%- _.kebabCase(name) %>.name" . }}-<%- _.kebabCase(workload.name) %>
  fileGroups:<% for (var i = 0; i < workload.volumes.length; i++) { var volume = workload.volumes[i]; %>
    - path: '<%- volume.mountPath %>'
      retentionPolicyName: 'retention-policy'<% } %>
  backend:
    {{ .Values.persistence.backup.type }}:
      {{- if (or (eq "gcs" .Values.persistence.backup.type) (eq "s3" .Values.persistence.backup.type)) }}
      bucket: {{ .Values.persistence.backup.bucket | quote }}
      {{- end }}
      {{- if (eq "s3" .Values.persistence.backup.type) }}
      endpoint: {{ .Values.persistence.backup.endpoint | quote }}
      {{- end }}
      {{- if (eq "azure" .Values.persistence.backup.type) }}
      container: {{ .Values.persistence.backup.container | quote }}
      {{- end }}
      prefix: {{ .Values.persistence.backup.prefix | quote }}
    storageSecretName: {{ template "<%- _.kebabCase(name) %>.fullname" . }}-backup
  schedule: {{ .Values.persistence.backup.schedule | quote }}
  volumeMounts:<% for (var i = 0; i < workload.volumes.length; i++) { var volume = workload.volumes[i]; %>
    - name: <%- volume.name %>
      mountPath: '<%- volume.mountPath %>'<% if (volume.subPath) { %>
      subPath: <%- volume.subPath %><% }} %>
  retentionPolicies:
    - name: 'retention-policy'
      keepLast: {{ .Values.persistence.backup.keepLast }}
      prune: true
{{- end }}
---
{{- if (not (empty .Values.persistence.backup.restore.<%- _.camelCase(name) %>Snapshot)) }}
apiVersion: stash.appscode.com/v1alpha1
kind: Recovery
metadata:
  name: {{ template "<%- _.kebabCase(name) %>.fullname" . }}-<%- _.kebabCase(name) %>
  labels:
    app: {{ template "<%- _.kebabCase(name) %>.name" . }}-<%- _.kebabCase(name) %>
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  repository:
    name: deployment.{{ template "<%- _.kebabCase(name) %>.sharedname" . }}-<%- _.kebabCase(workload.name) %>
    namespace: {{ .Release.Namespace }}
    {{- if (and (not (empty .Values.persistence.backup.restore.<%- name %>Snapshot)) (not (eq .Values.persistence.backup.restore.<%- name %>Snapshot "latest"))) }}
    snapshot: {{ .Values.persistence.backup.restore.<%- name %>Snapshot }}
    {{- end }}
  paths:<% for (var i = 0; i < workload.volumes.length; i++) { var volume = workload.volumes[i]; %>
    - '<%- volume.mountPath %>'<% } %>
  recoveredVolumes:<% for (var i = 0; i < workload.volumes.length; i++) { var volume = workload.volumes[i]; %>
    - mountPath: '<%- volume.mountPath %>'<% if (volume.subPath) { %>
      subPath: <%- volume.subPath %><% } %>
      persistentVolumeClaim:
        claimName: {{ .Values.persistence.existingClaim | default (include "<%- name %>.fullname" . ) }}<% } %>
{{- end }}

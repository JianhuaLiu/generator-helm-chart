apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: {{ template "<%- _.kebabCase(name) %>.fullname" . }}-<%- _.kebabCase(workload.name) %>
  labels:
    app: {{ template "<%- _.kebabCase(name) %>.name" . }}-<%- _.kebabCase(workload.name) %>
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}<% if (workload.volumes.length) { %>
  {{- if .Values.persistence.backup.enabled }}
  annotations:
    stash.appscode.com/backup-blueprint: {{ template "<%- _.kebabCase(name) %>.fullname" . }}
    stash.appscode.com/target-paths: '<% for (var i = 0; i < workload.volumes.length; i++) { var volume = workload.volumes[i]; %><%- volume.mountPath %><% if (i < workload.volumes.length - 1) { %>,<% }} %>'
    stash.appscode.com/volume-mounts: '<% for (var i = 0; i < workload.volumes.length; i++) { var volume = workload.volumes[i]; %><%- volume.name %>:<%- volume.mountPath %><% if (i < workload.volumes.length - 1) { %>,<% }}} %>'
  {{- end }}
spec:
  strategy:
    type: {{ .Values.config.updateStrategy }}
  template:
    metadata:
      labels:
        app: {{ template "<%- _.kebabCase(name) %>.name" . }}-<%- _.kebabCase(workload.name) %>
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ template "<%- _.kebabCase(name) %>.fullname" . }}-<%- _.kebabCase(workload.name) %>
          image: {{ .Values.images.<%- workload.name %>.repository }}:{{ .Values.images.<%- workload.name %>.tag }}
          imagePullPolicy: {{ .Values.config.imagePullPolicy }}
          ports:
            - name: container
              containerPort: <%- workload.port %><% if (workload.volumes.length) { %>
          volumeMounts:<% for (var i = 0; i < workload.volumes.length; i++) { var volume = workload.volumes[i]; %>
            - name: <%- volume.name %>
              mountPath: '<%- volume.mountPath %>'<% if (volume.subPath) { %>
              subPath: <%- volume.subPath %><% } if (volume.readOnly) { %>
              readOnly: true<% }}} %>
          env: []<% if (workload.healthcheck !== 'none') { %>
          livenessProbe:
            <%- workload.healthcheck %>:<% if (workload.healthcheckPath) { %>
              path: <%- workload.healthcheckPath %><% } %>
              port: container
{{ toYaml .Values.probes.liveness | indent 12 }}
          readinessProbe:
            <%- workload.healthcheck %>:<% if (workload.healthcheckPath) { %>
              path: <%- workload.healthcheckPath %><% } %>
              port: container
{{ toYaml .Values.probes.readiness | indent 12 }}<% } %><%- include('./volumes'); %><% if (workload.volumes.length) { %>
{{- if (and .Values.persistence.backup.enabled (not (empty .Values.persistence.backup.restore.<%- _.camelCase(workload.name) %>Snapshot))) }}
{{- $restore := .Values.persistence.backup.restore }}
---
apiVersion: stash.appscode.com/v1alpha1
kind: Repository
metadata:
  name: {{ template "<%- _.kebabCase(name) %>.fullname" . }}-restore-<%- _.kebabCase(workload.name) %>
  labels:
    app: {{ template "<%- _.kebabCase(name) %>.name" . }}-restore-<%- _.kebabCase(workload.name) %>
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  backend:
    {{ .Values.persistence.backup.type }}:
      {{- if (or (eq "gcs" .Values.persistence.backup.type) (eq "s3" .Values.persistence.backup.type)) }}
      bucket: {{ .Values.persistence.backup.bucket | quote }}
      {{- end }}
      {{- if (eq "s3" .Values.persistence.backup.type) }}
      endpoint: {{ .Values.persistence.backup.endpoint | quote }}
      {{- end }}
      {{- if (eq "azure" .Values.persistence.backup.type) }}
      container: {{ .Values.persistence.backup.container | quote }}
      {{- end }}
      prefix: '{{ .Values.persistence.backup.prefix }}/{{ .Release.Namespace }}/deployment'
    storageSecretName: {{ template "<%- _.kebabCase(name) %>.fullname" . }}-backup
---
apiVersion: stash.appscode.com/v1beta1
kind: RestoreSession
metadata:
  name: {{ template "<%- _.kebabCase(name) %>.fullname" . }}-<%- _.kebabCase(workload.name) %>
  labels:
    app: {{ template "<%- _.kebabCase(name) %>.name" . }}-<%- _.kebabCase(workload.name) %>
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  driver: Restic
  repository:
    name: {{ template "<%- _.kebabCase(name) %>.fullname" . }}-restore-<%- _.kebabCase(workload.name) %>
  rules:
    - snapshots:
        - {{ $restore.<%- _.camelCase(workload.name) %>Snapshot }}
  target:
    ref:
      apiVersion: apps/v1beta1
      kind: Deployment
      name: {{ template "<%- _.kebabCase(name) %>.fullname" . }}-<%- _.kebabCase(workload.name) %>
    volumeMounts:<% for (var i = 0; i < workload.volumes.length; i++) { var volume = workload.volumes[i]; %>
      - name: <%- volume.name %>
        mountPath: '<%- volume.mountPath %>'<% } %>
{{- end }}<% } %>

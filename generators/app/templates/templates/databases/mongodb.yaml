{{- if .Values.config.mongodb.internal }}
apiVersion: kubedb.com/v1alpha1
kind: MongoDB
metadata:
  name: {{ template "<%- _.kebabCase(name) %>.fullname" . }}-mongodb
  labels:
    app: {{ template "<%- _.kebabCase(name) %>.name" . }}-mongodb
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  {{- if .Values.persistence.backup.enabled }}
  annotations:
    stash.appscode.com/backup-blueprint: {{ template "<%- _.kebabCase(name) %>.fullname" . }}-mongodb
  {{- end }}
spec:
  version: {{ .Values.config.mongodb.version | quote }}
  {{- if (not (empty .Values.persistence.backup.restore.mongodbSnapshot)) }}
  databaseSecret:
    secretName: {{ template "<%- _.kebabCase(name) %>.sharedname" . }}-mongodb-auth
  {{- end }}
  {{- if .Values.config.mongodb.prometheus }}
  monitor:
    agent: prometheus.io/builtin
  {{- end }}
  {{- if .Values.persistence.enabled }}
  storageType: Durable
  {{- else }}
  storageType: Ephemeral
  {{- end }}
  {{- if .Values.config.mongodb.sharding.enabled }}
  shardTopology:
    configServer:
      replicas: {{ .Values.config.mongodb.sharding.configServerReplicas }}
      configSource:
        configMap:
          name: {{ template "<%- _.kebabCase(name) %>.fullname" . }}-mongodb
      {{- if .Values.persistence.enabled }}
      storage:
        {{- if .Values.persistence.storageClass }}
        {{- if (eq "-" .Values.persistence.storageClass) }}
        storageClassName: ''
        {{- else }}
        storageClassName: {{ .Values.persistence.storageClass }}
        {{- end }}
        {{- end }}
        accessModes:
          - {{ .Values.persistence.accessMode }}
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
      {{- end }}
    mongos:
      replicas: {{ .Values.config.mongodb.sharding.mongosReplicas }}
      strategy:
        type: RollingUpdate
      configSource:
        configMap:
          name: {{ template "<%- _.kebabCase(name) %>.fullname" . }}-mongodb
    shard:
      replicas: {{ .Values.config.mongodb.replicas }}
      shards: {{ .Values.config.mongodb.sharding.shards }}
      configSource:
        configMap:
          name: {{ template "<%- _.kebabCase(name) %>.fullname" . }}-mongodb
      {{- if .Values.persistence.enabled }}
      storage:
        {{- if .Values.persistence.storageClass }}
        {{- if (eq "-" .Values.persistence.storageClass) }}
        storageClassName: ''
        {{- else }}
        storageClassName: {{ .Values.persistence.storageClass }}
        {{- end }}
        {{- end }}
        accessModes:
          - {{ .Values.persistence.accessMode }}
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
      {{- end }}
  {{- else }}
  configSource:
    configMap:
      name: {{ template "<%- _.kebabCase(name) %>.fullname" . }}-mongodb
  {{- if (gt (.Values.config.mongodb.replicas | int64) 1) }}
  replicas: {{ .Values.config.mongodb.replicas }}
  replicaSet:
    name: rs0
  {{- end }}
  {{- if .Values.persistence.enabled }}
  storage:
    {{- if .Values.persistence.storageClass }}
    {{- if (eq "-" .Values.persistence.storageClass) }}
    storageClassName: ''
    {{- else }}
    storageClassName: {{ .Values.persistence.storageClass }}
    {{- end }}
    {{- end }}
    accessModes:
      - {{ .Values.persistence.accessMode }}
    resources:
      requests:
        storage: {{ .Values.persistence.size }}
  {{- end }}
  {{- end }}
  {{- if (empty .Values.persistence.backup.restore.mongodbSnapshot) }}
  init:
    scriptSource:
      configMap:
        name: {{ template "<%- _.kebabCase(name) %>.fullname" . }}-mongodb-init
  {{- end }}
  serviceTemplate:
    metadata:
      annotations:
        passMe: ToService
    spec:
      type: {{ .Values.service.mongodb.type }}
      {{- if (or (eq .Values.service.mongodb.type "LoadBalancer") (eq .Values.service.mongodb.type "NodePort")) }}
      externalTrafficPolicy: {{ .Values.service.mongodb.externalTrafficPolicy }}
      {{- end }}
      ports:
        - name: mongodb
          port: 27017
          targetPort: mongodb
          {{- if (and (eq .Values.service.mongodb.type "NodePort") (not (empty .Values.service.mongodb.nodePorts.mongodb))) }}
          nodePort: {{ .Values.service.mongodb.nodePorts.mongodb }}
          {{- end }}
  replicaServiceTemplate:
    annotations:
      passMe: ToReplicaService
    spec:
      type: {{ .Values.service.mongodb.type }}
      {{- if (or (eq .Values.service.mongodb.type "LoadBalancer") (eq .Values.service.mongodb.type "NodePort")) }}
      externalTrafficPolicy: {{ .Values.service.mongodb.externalTrafficPolicy }}
      {{- end }}
      ports:
        - name: mongodb
          port: 27017
          targetPort: mongodb
          {{- if (and (eq .Values.service.mongodb.type "NodePort") (not (empty .Values.service.mongodb.nodePorts.mongodb))) }}
          nodePort: {{ .Values.service.mongodb.nodePorts.mongodb }}
          {{- end }}
  updateStrategy:
    type: RollingUpdate
  {{- if .Values.persistence.enabled }}
  terminationPolicy: Pause
  {{- else }}
  terminationPolicy: Delete
  {{- end }}
{{- end }}
{{- if .Values.persistence.backup.enabled }}
---
apiVersion: appcatalog.appscode.com/v1alpha1
kind: AppBinding
metadata:
  name: {{ template "<%- _.kebabCase(name) %>.fullname" . }}-mongodb
  labels:
    app: {{ template "<%- _.kebabCase(name) %>.name" . }}-mongodb
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  annotations:
    stash.appscode.com/backup-blueprint: {{ template "<%- _.kebabCase(name) %>.sharedname" . }}-mongodb
spec:
  clientConfig:
    service:
      name: {{ template "<%- _.kebabCase(name) %>.fullname" . }}-mongodb
      port: 27017
      scheme: mongodb
  type: kubedb.com/mongodb
{{- if (not (empty .Values.persistence.backup.restore.mongodbSnapshot)) }}
{{- $restore := .Values.persistence.backup.restore }}
---
apiVersion: stash.appscode.com/v1beta1
kind: RestoreSession
metadata:
  name: {{ template "<%- _.kebabCase(name) %>.fullname" . }}-mongodb
  labels:
    app: {{ template "<%- _.kebabCase(name) %>.name" . }}-mongodb
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    kubedb.com/kind: MongoDB
spec:
  driver: Restic
  task:
    name: mongodb-restore-{{ .Values.config.mongodb.version }}
  repository:
    name: {{ template "<%- _.kebabCase(name) %>.sharedname" . }}-mongodb-mongodb
  target:
    ref:
      apiVersion: appcatalog.appscode.com/v1alpha1
      kind: AppBinding
      name: {{ template "<%- _.kebabCase(name) %>.fullname" . }}-mongodb
  rules:
    - snapshots:
      - {{ $restore.mongodbSnapshot }}
{{- end }}
{{- end }}
